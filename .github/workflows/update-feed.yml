name: Update RSS Feed

on:
  workflow_dispatch:
    inputs:
      title:
        description: "Post title"
        required: true
      link:
        description: "Canonical URL"
        required: true
      description:
        description: "Short description"
        required: true

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # allow push

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Update feed.xml (inline)
        env:
          TITLE: ${{ github.event.inputs.title }}
          LINK: ${{ github.event.inputs.link }}
          DESC: ${{ github.event.inputs.description }}
        run: |
          python - << 'PY'
          import os, re, datetime
          from xml.etree import ElementTree as ET

          def rfc2822_now():
              return datetime.datetime.utcnow().strftime("%a, %d %b %Y %H:%M:%S +0000")

          feed_path = "feed.xml"

          # load or create minimal feed
          if os.path.exists(feed_path):
              tree = ET.parse(feed_path)
              rss = tree.getroot()
              ch = rss.find("channel")
              if ch is None:
                  ch = ET.SubElement(rss, "channel")
          else:
              rss = ET.Element("rss", {"version": "2.0"})
              ch = ET.SubElement(rss, "channel")
              ET.SubElement(ch, "title").text = "Riggs Autoposts"
              ET.SubElement(ch, "link").text = "https://4x4trailrunners.com/"
              ET.SubElement(ch, "description").text = "Automated feed from Riggs"
              tree = ET.ElementTree(rss)

          # ensure lastBuildDate exists
          lbd = ch.find("lastBuildDate")
          if lbd is None:
              lbd = ET.SubElement(ch, "lastBuildDate")
          lbd.text = rfc2822_now()

          # build new <item>
          title = os.environ["TITLE"]
          link = os.environ["LINK"]
          desc = os.environ["DESC"]
          guid = re.sub(r"[^a-z0-9\-]+","-", (title + "-" + link).lower()) + "-" + datetime.datetime.utcnow().strftime("%Y%m%d%H%M%S")

          item = ET.Element("item")
          ET.SubElement(item, "title").text = title
          ET.SubElement(item, "link").text = link
          ET.SubElement(item, "description").text = desc
          ET.SubElement(item, "pubDate").text = rfc2822_now()
          ET.SubElement(item, "guid").text = guid

          # insert at top (before first existing item)
          items = ch.findall("item")
          if items:
              ch.insert(list(ch).index(items[0]), item)
          else:
              ch.append(item)

          # keep at most 50 items
          items = ch.findall("item")
          for old in items[50:]:
              ch.remove(old)

          ET.indent(tree, space="  ", level=0)
          tree.write(feed_path, encoding="UTF-8", xml_declaration=True)
          print("Updated", feed_path)
          PY

      - name: Commit & push if changed
        run: |
          git config user.name "Riggs Bot"
          git config user.email "actions@users.noreply.github.com"
          if ! git diff --quiet; then
            git add feed.xml
            git commit -m "Add item: ${{ github.event.inputs.title }}"
            git push
          else
            echo "No changes to commit."
          fi
